
多个源文件可同属于一个包，只要声明时package指定的包名一样；
一个包对应生成一个*.a文件，生成的文件名并不是包名+.a组成，应该是目录名+.a组成
go install ××× 这里对应的并不是包名，而是路径名！！
import ××× 这里使用的也不是包名，也是路径名
×××××.SayHello() 这里使用的才是包名！
指定×××路径名就代表了此目录下唯一的包，编译器连接器默认就会去生成或者使用它，而不需要我们手动指明！
一个目录下就只能有一个包存在
对于调用有源码的第三方包，连接器在连接时，其实使用的并不是我们工作目录下的.a文件，而是以该最新源码编译出的临时文件夹中的.a文件
对于调用没有源码的第三方包，上面的临时编译不可能成功，那么临时目录下就不可能有.a文件，所以最后链接时就只能链接到工作目录下的.a文件
对于标准库，即便是修改了源代码，只要不重新编译Go源码，那么链接时使用的就还是已经编译好的*.a文件
包导入有三种模式：正常模式、别名模式、简便模式


设置 GOPATH

先从go env 中拷贝 : set GOPATH=xxx
然后  粘贴到控制台 set GOPATH=xxx;newpath    # 这样就可以go build go install了



方法定义细节：
接受者为指针时，该方法只定义在指针上                借口类型要调用方法：接口类型的值只能是指针
接受者为对象时，该方法定义在对象以及指针上          借口类型要调用方法：借口类型的值可以使指针、对象



godoc fmt 查看fmt包的帮助文档


GOPATH可以设置多个目录


数组 声明 初始化：
var arr [5] int
var arr [...] int { 1,2,3,4,5}
var arr [4] int { 1:10, 2:20}


在windows上搞一个批处理文件放到%PATH%下，内容如下：
@echo off
set GOPATH=%cd%
echo GOPATH=%GOPATH%
以后在任意目录下执行即可动态设置GOPATH
linux下文件内容如下：
在.bashrc中加入：
alias gopath='export GOPATH=$(pwd)'
