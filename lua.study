userdata
{
    full userdata,          managed by lua      medatable
    light userdata,         mamanged by host 
}


-- 将栈上某个索引当表，取该表的值，放入栈顶上。
lua_getfield(l, i, "index")
lua_gettable(l, i, index)

-- 将LUA代码中，全局名放入栈顶
lua_getglobal(l, "")


-- 判断函数
lua_isboolean
lua_iscfunction
lua_isfunction
lua_islightuserdata
lua_isnil
lua_isnone  判断给定的索引是否可用
lua_isnoneornil 相似于 lua_isnone 以及nil 给定的索引
lua_isnumber
lua_isstring
lua_istable
lua_isthread
lua_isuserdata


lua_len(L, d) = #


lua_pushfstring



lua_settable

C:  BOOL FALSE/TRUE as lua boolean



-- lua 学习总结

语句以;结束，但;是可选的

lua -la -lb:要求在一个chunk内先运行a,再运行b

lua -i -la -lb : -i 表示运行之后进入交互模式

删除全局变量：b = nil

注释： -- 单行 --[[  内容  ]] : 多行注释

lua -e "print(math.sin(12))"  : -e 表示直接将命令传递给lua

lua 的8个类型：nil boolean number string userdata function thread table


Sring : [[...]]  多行字符串， 可以包含换行，

Lua通过引用比较tables、userdata、functions。也就是说当且仅当两者表示同一个对象时相等

nil false 为假，其它为真

x = x or v  
等价于：
if not x then
	x = v 
end

a ? b : c 等价于：(a and b) or c

lua 表的索引：从1开始

表构造函数可以使用，；来间隔，但通过使用；来间隔不同的类型

｛【】｝，【】中间要么是数字（record风格），要么是字符串(list风格)，

{["x"]=0, ["y"]=0}      					<-->    {x=0, y=0} 
{[1]="red", [2]="green", [3]="blue"}      	<-->  	{"red", "green", "blue"} 

if while repeat,末尾都有;结束号

函数只有一个参数并且这个参数是字符串或者表构造的时候，()可有可无
a{dddd=1,ddd=2,}
print "nihao" dofile "thefilename"

lua 函数多个返回值的问题，
1、当做为最后一个参数（包含仅有一个参数时），尽可能多的返回值
2、而其它情况下时，只返回一个参数

另：圆括号强制，如：return (foo2()) 只会返回第一个值


unpack:	接收一个数组做为输入参数，返回数组的所有元素。
a = {"hello", "ll"}
f = string.find
print(f(unpack(a))		-> 3 4

可变参数：内部有一个arg表，保存所有的元素。arg中有一个n字段，表示共有多少个
function select (n, ...)
    return arg[n]
end

-- 将可以参数，传递给另一个函数：
function fwrite(fmt, ...)
    return io.write(string.format(fmt, unpack(arg)))
end

-- 闭包
function newCounter()
    local i = 0
    return function()     -- anonymous function
       i = i + 1
        return i
    end
end

c1 = newCounter()
print(c1())  --> 1
print(c1())  --> 2
c2 = newCounter()
print(c2())	 --> 1
print(c1())	 --> 3


require 与 dofile 前者只加载一次，更好，

loadlib用来加载二进制库函数




// 元表

__add   +
__mul   *
__sub   -
__div(除)、
__unm(负)、
__pow(幂)
__concat ..
__len

__index __newindex  表中访问的域不存在时候才起作用

__eq    ==
__lt    <
__le    <=
__gc    the metable of full userdata or table field, called when gather collect.
__tostring

__callable() 让对象可执行

多个类型操作时，lua首先调用第一个的元表，如果不存在，则调用第二个的元表，否则报错。

function Account:withdraw(v)
    self.xxx = v
end
冒号的效果相当于在函数定义和函数调用的时候，增加一个额外的隐藏参数。self


C 与lua  交互
读写Lua全局变量的函数，
调用Lua函数的函数，
运行Lua代码片断的函数，
注册C函数然后可以在Lua中被调用的函数





当表b 引用 到a之上是，b更改了内容，a的内容会发生更改，b消失后a不变，
local a = {}
local b = a
b.str="123"
b=nil
此时a仍有字段str


表中存入函数地址，或者字符串。

如果有文件：lib.lua
require("lib")不要包括后缀名，require中的内容只会加载一次，
如果require返回一个表，在其它文件中引用之后，文件改变了表的内容，也会跟关改变



local t = {} t的成员函数，定义在里面，外面都一样，
只是在调用的时候，第一个参数由self传递。


一般规定：
表的.成员函数，不使用self对象，调用的时候，用.
表的:成员函数，使用self对象，  调用的时候，用:
他们都是一样的性质，


-- 在for循环中删除表中的内容，应该如此，使用[]
for k, v in ipairs(a) do
    if ( k % 3 == 0 ) then
        print(k .. " = ", v)
        a[k] = nil 
    end
end

-- 显示时间
a = os.date("!*t")
print_table(a, "a")



在a文件中定义，
local p = nil，在其它地方(比如 if ... end 内赋值。)是说明p为局部变量，其它文件中无法访问。
否则，p会成为全局变量。


for k, v .... 中的k,v 到for结束时，自动置为nil,不会污染全局命名空间。




------------------ lua 5.2 study ---------------------------------------------------------------------------------------

in interpreter mode, type "= xxx" gen effect the same as print(xxx)

e.g.
    =a          <--> print(a)

    -- 多行字符串
    [[ this is fuck 
        haha
    ]] 

或者 [==[   ]==]


::label::   &  goto label



env..ment
lua compiles any chunk in the scope of any upvalue called _ENV.
translate any free name var to _ENV.var
_ENV = _G





_ENV = nil can invalidate any direct asscess to global variable in the rest of the chunk.


I can switch _ENV in time every entry.


_ENV = { _G = _G }

table, function, thread, fulluserdata 是对象，只能引用，
元表中如果有__metatale，则getmetatable返回它，不返回元表本身。
query metamethod are alway raw, does not invoke other metamethod.


--------------------- new lib study ----------------
_, cnt = string.gsub(str, " "," ")      -- 统计了 出现的次数
%b用来匹配对称的字符
%bxy:常用的模式有：%b() %b[]  %b%{%}  %b<>

str= "name = value"
_, _, key, val = string.find(str, "(%a+)%s=%s(%a+)")    -- 返回

match gmatch返回的是itor,而不是位置







-- ZeroTable
-------------------------------------------

-- 为表设置一些默认值
DefaultValue = function(t, val)
    assert(val, "val must be present.")
    local _mtable =
    {
        __index = function(t, n)
            rawset(t, n, val)
            return val
        end,
    }
    setmetatable(t, _mtable)
end


-- 将表未赋值的项设置为0
ZeroTable = function(t)
    DefaultValue(t, 0)
end

local ttt = {}
DefaultValue(ttt, {"i come", "i fuck", "i phone", })

zcg_print(ttt.str)
zcg_print(ttt[223])





-- 找出全局重复的东东
local tab = {}
local logfile = io.open("c:\\key.txt", "w+")

local mt = {}
mt.__newindex = function(t, k, v)
    if tab[k] then
        logfile:write(k .. "\n")
    else
        tab[k] = true
    end
    -- rawset(t, k, v)
end

setmetatable(_G, mt)



-- 打印出所有的全局项
local pfile = io.open("c:\\a.txt", "w+")
for k, v in pairs(_G) do
    if type(v) ~= "function" then
	pfile:write(k .. "\n")
    end
end
pfile:close()




// C++调试打印
void utils::print_stack(lua_State* L)
{
    lua_getglobal(L, "debug");
    lua_getfield(L, -1, "traceback");

    int iError = lua_pcall(L, 0, 1, 0);
    if (iError)
    {
        const char* sz = lua_tostring(L, -1);
        sLog.error("%s", sz);
        lua_pop(L, 1);
    }
    const char* stack = lua_tostring(L, -1);
#if defined (ECL_WIN) 
    ::OutputDebugStringA(stack);
#else
	printf("lua stack: %s\n", stack);
#endif
	lua_pop(L, 2);
}

