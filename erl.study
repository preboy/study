
-- make record when get good idea in erlang.
abc_defgd"include

tuple 元组 {   }, 
list  列表[ ],
字符串是整数列表，且只能用"括起来，因为'用来表示原子。


case Express of
    pattern1 [ when gurad1] -> r1;
    pattern2 [ when gurad2] -> r2;
end

对Express 求值，然后匹配，未匹配则失败，异常


if 
    guard1 -> r1;
    guard2 -> r2;
end

if :依次求值，直到一有个匹配为止，然后返回其值，至少要有一个true,否则异常



erlang:error(...)   
thorw() : 给调用者抛出异常，可以忽略或者捕获
exit()  :退出时调用。


try  ... catch  包裹异常代码
catch 


try Expres of
    pattern2 [when guard] -> r1;
    pattern2 [when guard] -> r1;
    pattern2 [when guard] -> r1;
catch
    extype:excep1 [when guard 1]-> r1;
    extype:excep1 [when guard 1]-> r1;
    extype:excep1 [when guard 1]-> r1;
after
    % dooooooo
end


try Expression
catch
    ...

end


try
catch
    _:_ -> ddd;  捕获所有的异常

最好使用 try of  代替老式的 case catch() of -> {Exit:dddddd)...

<<"abc">> 二进制，
<<X:3, Y=3, Z=2>>

-compile(export_all) 调试方便

块表示式，最终值为最后一个的值，
begin
    Expr1,
    Expr2,
end


fun d:abc/1, 这是在引用一个函数
fun (I) -> I end % 这是在定义一个函数



f("begin" ++ T)
f("end" ++ T)

andalso  orelse 表示短路表达式，
and or 两边都要求值，然后才结算结果，

init:stop() % exit .


receive
    Pattern [when guard 1] ->
        1;


after Time ->
    % Express Timer do
end

只有在邮箱中所有消息都检测过之后，才会去匹配after字段超时


priori()
    receive
        {alarm, X} ->
            {alarm, X}
    after 0
        receive 
            Any ->
                Any
        end
    end.
        

-- create new progress.
spawn( fun xxx/1).
spawn( fun() -> xxx(a,b,c) end).

所有消息都匹配一次，看是否中，

%% 为PID注册别名
register(AnAtom, Pid).
unregister(AnAtom).
whereis(AnAtom) -> Pid | undefined.
registered()

spawn(Mod, FunName, Args) = FunName(Arg1, Arg2).

%% 设置为系统进程
process_flag(trap_exit, true)

exit(Why) 终止当前进程
exit(Pid,Why) 向Pid发送退出消息。


监视器：单向的而非双向(link)






















