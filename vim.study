
U 行撤消
ctrl+r、u，撤消

w b 移动到下一个、前一个单词的开头，  W E 忽略标点符号他们以' '分隔的字串为大WORD
e ge 移动致力下一个、前一个单词的末尾， 

33G移动到33行上

50% 移动到文件的中间，

H　M　L　本页移动光标，到头、中、尾

CTRL + G 确定当前所在文件的行，
:set ruler 右下角显示位置信息

zt z.(zz) z- 移动当前光标所在的行到屏幕顶端、中间、底部位置。

/ ? 中， .*[]^%/\?~$ 他们是有特殊意义的，如果要查找他们，请加上 \
:set ignorecase 
在命令输入模式中：可以上下翻页，还可以输入一开头，再up down
\< \> 标记单词的末尾、开头
:set hlsearch 设置高亮

ctrl+o ctrl+i 来回反复跳跃

m[a-z]记录位置，
`[a-z]跳转到记录的位置，
:marks显示列表

cc 修改一整个行，c$ = C  c^

x X 删除当前光标前后的字符，
D 删除到行尾
C 删除到行尾并插入模式
S 删除整行并插入模式    == cc
s 删除一个字符，并插入模式，
r 替换一个字符，
R 替换，不会骚扰到下一行。
. 重复上一个操作命令（查找一个单词，修改，然后用n .重复）
p P  分别在光标前，后插入剪切板的内容。
xp 交换两个字符。
y[motion],操作，拷贝，Y拷贝一整行，
daw caw 相当棒的东西。 他们包含两头的空格，或者（】等。
diw 则不包括


~  会从当前位置开始，替换字符的大小写，并移动光标。

:map <F5> i{<Esc>nnn}<Esc>
:map 查看映射列表

ctrl+W hlkj t b \

vimdiff file1 file2 比较两个文件

q{register(小写的26个字母之一)} [motion]+ q  记录，以后调用 @{register}即可
而且，输入之后，{register}里面的内容，还是可以修改的，
"{reg}p,粘贴出来，修改，"{reg}p$
就可以了。
q{reg(大写的26个字母之一)}，追加新的命令到寄存器。
：[range]s/from/to/g 全文替换




在最下面的命令行中，
CTRL+W  删除光标前一个单词，CTRL+U删除一整行，
在命令行中，输入
!{program}  执行命令
r !{program}    执行，并读取其输入到文件中。
w !{program}    执行，并将文本传入 w !sort排序文件。
:shell 弹出命令行窗口，

刚打开gvim时，'0 打开最后一个文件，

会话：(由sessionoptions配置中记录)

创建会话：
:mksession vimbook.vim
还原会话：
:source vimbook.vim
或者打开时即会话：
vim -S vimbook.vim



// 目录操作
:pwd    显示当前目录
:cd     更改
:cd - 回到更改之前的目录
:lcd 在当前分隔的窗口中单独保存自己的目录信息，不会随关其它的更改而更改


gf 会打开文件。如果不在当前目录下，则会到path中去找，
path的设置：set path+= c:\windows、 set path+= ./dir
在当前设置的目录中查找：:find filename，注，edit不用这个path选项
但若是要在新的窗口中打开，则CTRL+W、f   ctrl+w gf
:sfind filename
ctrl+w i 在新的窗口中打开关键字所在行。
ctrl+w d 在新的窗口中打开关键字所在行，用于宏。



缓冲区：
:buffers    :ls     :files 列出当前缓冲区，
:buffer <id or name> 打开
:sbuffer <id or name > 在新的窗口中打开，

vim -x filename     可以启用加密的方式编辑文件。
:set key= 可以对加密的文件解除密码。

vim -b filename 编辑二进制文件。

g CTRL + G显示当前编辑字符所在文件中的位置。。


CTRL + p CTRL + n 可以在提示框的下拉列表中上下选择


/aa*匹配a aa aaa *表示前一个字符出现了N次，
/\(ab\)*  匹配ab abab ababab

/ab\{n,m} 匹配b出现了n~m次，abbb abbbb abbbbbb
n省略表示0,m 表示无限大，

/one\|two|\three 表示匹配one two three中的任意一个
^表示取反  [^"]表示非以"的字符。
    \d	数位			[0-9]
	\D	非数位			[^0-9]
	\x	十六进制数位	[0-9a-fA-F]
	\X	非十六进制数位	[^0-9a-fA-F]
	\s	空白字符		[ 	]     (<Tab> 和 <Space>)
	\S	非空白字符		[^ 	]     (非 <Tab> 和 <Space>)
	\l	小写字母		[a-z]
	\L	非小写字母		[^a-z]
	\u	大写字母		[A-Z]
	\U	非大写字母		[^A-Z]


zf 创建折叠

zo zc 打开 关闭折叠 
zr zR   展开所有折叠
zm zM   关闭所有折叠
zd  删除
zn  立即禁止快速折叠功能，
zN  立即打开折叠功能。
zi  切换zn zN之间

set foldmethon = indent 则依据缩进创建所有折叠。

标签：
  
:ctags *.c  为当前目录下所有的C文件生成标签，
:tag funname 跳转到函数， 支持TAB键补全功能。
ctrl+] 跳到当前目标下的标签
ctrl+t 跳来跳去
:tags 列出当前跳转的路径
:stag funname 在新的窗口中打开标签      或者   CTRL + W  ] 
只会在当前目录下查找标签，如果要在多个地方查找标签，请设置，
:set tags=./tags,./../tags,./*/tags
:set tags=~/proj/**/tags    查找整个目录树下标签

标签打包,将目录下所有的tag打包成一个
cd ~/prboy
ctags -R .
然后 set tags=~/preboy/tags
:tnext 跳转同一个标签的另一个声明。
:tselect tagname 会列出列表供选择
:tselect /block     查找包含block模式的所有标签，/ 是模式开始符。

:ptag write_char 打开预览窗口，并在那里显示write_char函数的原型。
CTRL + W  }  对当前光标下的标签，在预览窗口是显示申明。
:pclose 关闭。
:psearch name  据说十分有用，显示在当前文件以及所有包含文件中的单词，

... 跳转，



[D  查找宏定义，列表        从文件头开始
[d  只列出第一项            从文件头开始
]D  只列出光标下面的项目，              从当前位置开始
]d  只列出光标下面的项目中的第一项      从当前位置开始
[ ctrl+d 则跳转到第一项 ，从文件头开始 ] ctrl+d 从当前位置开始 

[I 查找所有包含的文件，并列出表    从头开始
]I 只列出光标下方的项               从当前开始
[i 只列出第一项     
]i 只列出光标下方的第一项
[ ctrl+i 跳转到位置，   从头开始，
] crlr+i 跳转到位置，   从当前开始，

:checkpath 列出不能被找到的头文件，
checkpath! 列出所有的文件

:set  path += /projects/**/include,
<n>[tab 或 [ ctrl+I 查看第一<n>项 (CTRL+I 与 Tab键是一样的效果。)


gD 在当前文件内查找光标所定义的单词，
gd 仅在当前函数内.....


在注释中跳转： 只对 /**/ 有效果
[/  移动到一个注释的开始，  (向前)
]/  移动到一个注释的结束    (向后)

( ) { } 分别查找前一个后一个句子，段落的开始，结束。

[[  外部代码块的开始处      前一个函数的开始
][  外部代码块的结束处      后一个函数的开始
[{ 当前代码块的开始处       当前块的开始
]} 当前代码块的结束处       当前块的结束
[]  反向移动到前一个函数的结尾，    前一个函数的结束
]]  正向移动到下一个函数的开始。    后一个函数的结束
[m 前一个方法的开始处
]m 下一个方法的开始处

[* = [/ 
]* = ]/

"[(" 和 "])" 命令与 "[{" 和 "]}" 类似，只不过它们适用于 () 对而不是 {} 对
前向移动到( 向后移动到)

// 打开文件浏览器选择文件，初始目录设置为/etc
:browse vsplit /etc

:command 列出所有自定义的命令，也可以自己定义命令
定义：  :command -nargs=* DoIt :call AFunction(<f-args>)
执行：  :DoIt a b c
:delcommand 删除命令

另，vim系统还有自定义命令，事件，

----------------------------------the first stage---------------------


gI 相当于 I 只是从第一列开始，而非第一个字符。 gJ 连接行，包括空格
g8 显示字符的编码 
ga 以8 10 16 进制显示光标下字符

g# g* 类似于# * 但不做全字匹配
gm  行中间



ctrl+w d
ctrl+w f F 打开光标下的文件，新的窗口，新的TAB页


查找 
/ 往下查找， ? 往上查找 之后的n  表示下一个项，N 表示上一个项


;  表示在F T 之后，重复上跳转，继续跳转
,  与;作用相同，方向相反

.  重复上次的操作，


H M L 可以带参数，表示相距多少元，20H  表示本窗口20行，
go 表示自文件开始的多少个字符的偏移处
:ju 列出跳转表

ctrl+e ctrl+y 分别表示上移一行，下移一行，光标所在的行不变哦


# 以下这几个我要一直在用更复杂的方法，
zt = z<CR>
z. = zz
z- = zb

在可视模式下，I A可以在所有选中的行上操作

:sh 临时开启一个shell， exit之后又回到了vim

help index
help CTRL-A
help i_CTRL-A 显示插件模式的帮助
help number    
help 'number'  是不一样的
:options 可以查看所有的选项，
set number&  这样可以恢复为默认值。
help E37 查看不能理解的错误。

^表示第一个非空字符，而0表示第一个字符，比^还要靠前

每次执行一个要将光标移出本行之外的操作，都叫作“跳转”，而``可以回到上次中转的地方，''也可以  但j, k不属于跳转
:jumps 列出一个可以跳转的列表，


visual模式
V v 进入vitual模式   V(行)  CTRL+V进行 列块选择模式。
o表示 other end,移动到选择文本的另一端，这样可以两头开花

yw ye 复制，yw包含后面的空格字符，ye不包含

vim插件：全局插件、 文件类型插件


set list  显示TAB $ ^





















'0   '9 分别表示最后一次 到最近第10次退出vim的地点。
:marks


:oldfiles   最近打开过的文件列表
:e #<2   表示打开2号
:split #<3  
 或者 :browse oldfiles   ，然后q ,然后选择 

