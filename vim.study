
U 行撤消
ctrl+r、u，撤消

w b 移动到下一个、前一个单词的开头，  W E 忽略标点符号他们以' '分隔的字串为大WORD
e ge 移动致力下一个、前一个单词的末尾， 

33G移动到33行上

50% 移动到文件的中间，

H　M　L　本页移动光标，到头、中、尾

CTRL + G 确定当前所在文件的行，
:set ruler 右下角显示位置信息

zt z.(zz) z- 移动当前光标所在的行到屏幕顶端、中间、底部位置。

/ ? 中， .*[]^%/\?~$ 他们是有特殊意义的，如果要查找他们，请加上 \
:set ignorecase 
在命令输入模式中：可以上下翻页，还可以输入一开头，再up down
\< \> 标记单词的末尾、开头
:set hlsearch 设置高亮

ctrl+o ctrl+i 来回反复跳跃

m[a-z]记录位置，
`[a-z]跳转到记录的位置，
:marks显示列表

cc 修改一整个行，c$ = C  c^

x X 删除当前光标前后的字符，
D 删除到行尾
C 删除到行尾并插入模式
S 删除整行并插入模式    == cc
s 删除一个字符，并插入模式，
r 替换一个字符，
R 替换，不会骚扰到下一行。
. 重复上一个操作命令（查找一个单词，修改，然后用n .重复）
p P  分别在光标前，后插入剪切板的内容。
xp 交换两个字符。
y[motion],操作，拷贝，Y拷贝一整行，
daw caw 相当棒的东西。 他们包含两头的空格，或者（】等。
diw 则不包括


~  会从当前位置开始，替换字符的大小写，并移动光标。

:map <F5> i{<Esc>nnn}<Esc>
:map 查看映射列表

ctrl+W hlkj t b \

vimdiff file1 file2 比较两个文件

{register(小写的26个字母之一)} [motion]+ q  记录，以后调用 @{register}即可
而且，输入之后，{register}里面的内容，还是可以修改的，
"{reg}p,粘贴出来，修改，"{reg}p$
就可以了。
q{reg(大写的26个字母之一)}，追加新的命令到寄存器。
：[range]s/from/to/g 全文替换
@@可以直接调用上一次调用过的宏



在最下面的命令行中，
CTRL+W  删除光标前一个单词，CTRL+U删除一整行，
在命令行中，输入
!{program}  执行命令
r !{program}    执行，并读取其输入到文件中。
w !{program}    执行，并将文本传入 w !sort排序文件。
:shell 弹出命令行窗口，

刚打开gvim时，'0 打开最后一个文件，

会话：(由sessionoptions配置中记录)

创建会话：
:mksession vimbook.vim
还原会话：
:source vimbook.vim
或者打开时即会话：
vim -S vimbook.vim



// 目录操作
:pwd    显示当前目录
:cd     更改
:cd - 回到更改之前的目录
:lcd 在当前分隔的窗口中单独保存自己的目录信息，不会随关其它的更改而更改


gf 会打开文件。如果不在当前目录下，则会到path中去找，
path的设置：set path+= c:\windows、 set path+= ./dir
在当前设置的目录中查找：:find filename，注，edit不用这个path选项
但若是要在新的窗口中打开，则CTRL+W、f   ctrl+w gf
:sfind filename
ctrl+w i 在新的窗口中打开关键字所在行。
ctrl+w d 在新的窗口中打开关键字所在行，用于宏。



缓冲区：
:buffers    :ls     :files 列出当前缓冲区，
:buffer <id or name> 打开
:sbuffer <id or name > 在新的窗口中打开，

vim -x filename     可以启用加密的方式编辑文件。
:set key= 可以对加密的文件解除密码。

vim -b filename 编辑二进制文件。

g CTRL + G显示当前编辑字符所在文件中的位置。。


CTRL + p CTRL + n 可以在提示框的下拉列表中上下选择


/aa*匹配a aa aaa *表示前一个字符出现了N次，
/\(ab\)*  匹配ab abab ababab

/ab\{n,m} 匹配b出现了n~m次，abbb abbbb abbbbbb
n省略表示0,m 表示无限大，

/one\|two|\three 表示匹配one two three中的任意一个
^表示取反  [^"]表示非以"的字符。
    \d	数位			[0-9]
	\D	非数位			[^0-9]
	\x	十六进制数位	[0-9a-fA-F]
	\X	非十六进制数位	[^0-9a-fA-F]
	\s	空白字符		[ 	]     (<Tab> 和 <Space>)
	\S	非空白字符		[^ 	]     (非 <Tab> 和 <Space>)
	\l	小写字母		[a-z]
	\L	非小写字母		[^a-z]
	\u	大写字母		[A-Z]
	\U	非大写字母		[^A-Z]


zf 创建折叠

zo zc 打开 关闭折叠 
zr zR   展开所有折叠
zm zM   关闭所有折叠
zd  删除
zn  立即禁止快速折叠功能，
zN  立即打开折叠功能。
zi  切换zn zN之间

set foldmethon = indent 则依据缩进创建所有折叠。

标签：
  
:ctags *.c  为当前目录下所有的C文件生成标签，
:tag funname 跳转到函数， 支持TAB键补全功能。
ctrl+] 跳到当前目标下的标签
ctrl+t 跳来跳去
:tags 列出当前跳转的路径
:stag funname 在新的窗口中打开标签      或者   CTRL + W  ] 
只会在当前目录下查找标签，如果要在多个地方查找标签，请设置，
:set tags=./tags,./../tags,./*/tags
:set tags=~/proj/**/tags    查找整个目录树下标签

标签打包,将目录下所有的tag打包成一个
cd ~/prboy
ctags -R .
然后 set tags=~/preboy/tags
:tnext 跳转同一个标签的另一个声明。
:tselect tagname 会列出列表供选择
:tselect /block     查找包含block模式的所有标签，/ 是模式开始符。

:ptag write_char 打开预览窗口，并在那里显示write_char函数的原型。
CTRL + W  }  对当前光标下的标签，在预览窗口是显示申明。
:pclose 关闭。
:psearch name  据说十分有用，显示在当前文件以及所有包含文件中的单词，

... 跳转，



[D  查找宏定义，列表        从文件头开始
[d  只列出第一项            从文件头开始
]D  只列出光标下面的项目，              从当前位置开始
]d  只列出光标下面的项目中的第一项      从当前位置开始
[ ctrl+d 则跳转到第一项 ，从文件头开始 ] ctrl+d 从当前位置开始 

[I 查找所有包含的文件，并列出表    从头开始
]I 只列出光标下方的项               从当前开始
[i 只列出第一项     
]i 只列出光标下方的第一项
[ ctrl+i 跳转到位置，   从头开始，
] crlr+i 跳转到位置，   从当前开始，

:checkpath 列出不能被找到的头文件，
checkpath! 列出所有的文件

:set  path += /projects/**/include,
<n>[tab 或 [ ctrl+I 查看第一<n>项 (CTRL+I 与 Tab键是一样的效果。)


gD 在当前文件内查找光标所定义的单词，
gd 仅在当前函数内.....


在注释中跳转： 只对 /**/ 有效果
[/  移动到一个注释的开始，  (向前)
]/  移动到一个注释的结束    (向后)

( ) { } 分别查找前一个后一个句子，段落的开始，结束。

[[  外部代码块的开始处      前一个函数的开始
][  外部代码块的结束处      后一个函数的开始
[{ 当前代码块的开始处       当前块的开始
]} 当前代码块的结束处       当前块的结束
[]  反向移动到前一个函数的结尾，    前一个函数的结束
]]  正向移动到下一个函数的开始。    后一个函数的结束
[m 前一个方法的开始处
]m 下一个方法的开始处

[* = [/ 
]* = ]/

"[(" 和 "])" 命令与 "[{" 和 "]}" 类似，只不过它们适用于 () 对而不是 {} 对
前向移动到( 向后移动到)

// 打开文件浏览器选择文件，初始目录设置为/etc
:browse vsplit /etc

:command 列出所有自定义的命令，也可以自己定义命令
定义：  :command -nargs=* DoIt :call AFunction(<f-args>)
执行：  :DoIt a b c
:delcommand 删除命令

另，vim系统还有自定义命令，事件，

----------------------------------the first stage---------------------


gI 相当于 I 只是从第一列开始，而非第一个字符。 gJ 连接行，包括空格
g8 显示字符的编码 
ga 以8 10 16 进制显示光标下字符

g# g* 类似于# * 但不做全字匹配
gm  行中间



ctrl+w d
ctrl+w f F 打开光标下的文件，新的窗口，新的TAB页


查找 
/ 往下查找， ? 往上查找 之后的n  表示下一个项，N 表示上一个项


;  表示在F T 之后，重复上跳转，继续跳转
,  与;作用相同，方向相反

.  重复上次的操作，


H M L 可以带参数，表示相距多少元，20H  表示本窗口20行，
go 表示自文件开始的多少个字符的偏移处
:ju 列出跳转表

ctrl+e ctrl+y 分别表示上移一行，下移一行，光标所在的行不变哦


# 以下这几个我要一直在用更复杂的方法，
zt = z<CR>
z. = zz
z- = zb

在可视模式下，I A可以在所有选中的行上操作

:sh 临时开启一个shell， exit之后又回到了vim

help index
help CTRL-A
help i_CTRL-A 显示插件模式的帮助
help number    
help 'number'  是不一样的
:options 可以查看所有的选项，
set number&  这样可以恢复为默认值。
help E37 查看不能理解的错误。

^表示第一个非空字符，而0表示第一个字符，比^还要靠前

每次执行一个要将光标移出本行之外的操作，都叫作“跳转”，而``可以回到上次中转的地方，''也可以  但j, k不属于跳转
:jumps 列出一个可以跳转的列表，


visual模式
V v 进入vitual模式   V(行)  CTRL+V进行 列块选择模式。
o表示 other end,移动到选择文本的另一端，这样可以两头开花

yw ye 复制，yw包含后面的空格字符，ye不包含

vim插件：全局插件、 文件类型插件


set list  显示TAB $ ^


















'0   '9 分别表示最后一次 到最近第10次退出vim的地点。
:marks


:oldfiles   最近打开过的文件列表
:e #<2   表示打开2号
:split #<3  
 或者 :browse oldfiles   ，然后q ,然后选择 

=======
:hide edit newfile.h  打开新文件，旧的文件暂时先不用保存

:next netx! wnext 用于文件列表，在vim开启时带的多个参数
:args f1 f2 f3 可以打开另一个文件列表。
:saveas new_fn  另存为
:file fn.txt 标记已打开的文件为新建的文件，之后直接调用:w会给出提示。说还未保存过文件，

:split  新建分隔窗口，可以带参数fn
:new 打开新窗口

[range]:s/from/to/flag  实现替换
    flag: confirm/global/print    flag=g表示对该行的所有的都替换

:[range]global/{pattern}/{command}

Ctrl+V 然后 I 输入之后，ESC，所有行都输入了


usr_12中，讲了可以替换文件夹下所有文件中的一个函数的方法。
vim *.cpp
qa 
:%s/four/r/g
wnext
q
999@a


命令行上可以自动补全：tab  ctrl+L 
history /  


oldfiles 显示最近编辑文件列表
:e #<2 打开oldfiles列表中的第2个文件，同样 split #<3 也可以

ctrl+x ctrl+*  有一系列的提示按键

ab\{1,3}  匹配ab, abb abbb
其中{1,}  {,3}, {5} 是合法的输入
{-2, 4}, 前面有一个-， 表示尽可能少的匹配
a.*b 尽可能多的匹配
a.{-}b 尽可以少的匹配
/foo\|bar  多选一


折叠
zf  zo zc 创建，打开，关闭
zr zm   zR zM更方便的操作
zn zN  禁止/启用折叠  zi 在他们之间切换



<<<<<<< HEAD
-------------------- 学习vi和Vim编辑器(中文版)(第7版).pdf ------------------

e! 可以使文件回到最初状态
:8,12|sort   排序制定的行


.,.+2!cmd
=======


============================================ vim ============================================

N |  到第N列
- 上一列，非 blank 字符
+ 下一列，非 blank 字符

gk  gj  同k j 一样，但当wrap的时候，更有用，不会越过

w W  对应 b B
e E  对应 ge gE

)  向下 句子
(  向上 句子
}  向下 段落
{  向上 段落


]] 向下 节
[[ 向上 节      -- 这个我不懂

g* = *
g# = #  但支持部分匹配的搜索

    
z  = zt
z. = zz
z- = zb

:set nowrap
zh  /  zH    向前一字/半行
zl  /  zL    向后一字/半行



r file.txt    # 读取文件并输入到光标处
r! commands   # 执行command的结果，并插入到光标处。

x / X       # 删除光标后/前的单个字符

D/C 删除/删除并进行插入模式光标到行尾 
J 合并两行

c{motion}  后面跟的是一个motion  caw,  ca{  然后进入插入模式
s          只删除当前光标下的一个字符

cc = S 删除整行并进入插入模式


[count]~ 替换大小写  3~ 便可以将END替换成end

[virtual]  u  U / 将选择的大写/小写

g~/gu/gU {motion}  可以选择

<<   左移
>>   右移
#  其它   <{motion}  >{motion} :center :left :right  gq{motion}


:[range]substutite/{parttern}/{string}/[g][c]
:[range]s] 执行上一个 :s命令
& 在当前行上，执行上一个S

:edit {file}    # 加载文件。
:edit           # reload file.


----  在virtual模式下，按o/O，在被选中的两端，


yw  ye   # yw有空格，ye没有空格

"*yy   复制到windows的剪贴板
"*p    粘贴


# split
:split filename
:vsplit filename 
:close 关闭
:new 新开一个空的

ctrl+w  hlkj 
ctrl+w  t [top]  b[bottom]


----------------
q{register}     # start
action          # record keystroke
q               # end
@{register}     # parse

"{register}p    # 可以粘贴



--------  s 替换命令 -----------
:%s 当前文件
:s  当前行
.   当前行
$   最尾行
:.,$s/yes/no   表示从当前光标，到文件结束

粘贴板
"*p
"+p

/Casting/-1         # 搜索所有Casting上的上一行
/Casting/+1         # 搜索所有Casting上的下一行
.+3, $-5        这也是一个合法的范围

还可以使用另一种方法，
在文件中 标识两个mark
ma   mb
'a, 'b   这表示在两个mark之间的范围

还可以使用Visutal模式，然后按:   这样手动选择一定的范围
则会出现： '<,'>
实际上，< > 分别表示上一次select的起始范围，当你做新的选择的时候，它们会自然改变
'<、'> 分别跳转到上一次选择的始末位置。

.,.+4       表示选择从当前行开始的4行，


ctrl+q  可以开始在每一行输入同样的内容。


想要一个操作作用于一行，重启两次就行， 比如 cc dd 
同样 gugu 可以使一事先小写 gUgU可以大写整行


! 执行外部过滤操作 
!5G  表示，从当前行到5行，
!{selection}action
也可以先在Selection模式下选择。

!!  以当前行为Input 执行过滤操作。


:read !ls-al  本来这个地方是读取一个file， 但使用了！，则表示执行一个程序的输出。
:write !wc   也可以手工选择一段范围

help ^V     # ctrl+v的帮助
help i^V    # insert 模式下ctrl+v的帮助


ctrl+o 在插入模式中进入普通模式，等待一个命令的输入
<ctrl+o>zz
ctrl+r 0  在编辑模式下，表示把reg0中的内容放置到该处，
gv 重新选择上一次选择的部分(visual模式下)
普通模式下gU{motion} = 可视模式下U

:数字  移动光标到指定行
.,$p  表示打印当前行到结尾处
:%    所有行

:t(copy) :m(move)  {address} 复制或移动range到 address

:%normal A;  在每一行最后都添加一个;   (normal会移动光标到行首)
:%normal @q   这个应该很强大

@: 重复上次执行的 Ex命令

Ex命令中，输入了一般可以 连续tab 或者 CTRL+D来查看列表 或者在命令选项也可以用Ctrl+d查看
ctrl+r ctrl+w 表示插入当前光标下的单词
:%//<ctrl+r><ctrl+w>/g表示把所有高亮的替换为当前光标下的单词
 
 :write | !node %  保存并执行当前文件


 缓冲区
 :bprev  :bnext   :bfirst  :blast
 :ls   列表
 :buffer N   跳转

 :bufdo      在:ls的列表中执行一个命令
 :argdo      的args的列表中执行一个命令

 args *.*            当前目录下所有文件
 args **/*           会递归所有文件


 参数列表：  (注意与缓冲区的对比)
 :next  :prev    跳转
 args {arglist}  执行特殊命令


 窗口
 ctrl+w  s   水平新窗口仍旧显示当前文件      :split {file}  水平显示新文件
 ctrl+w  v   垂直新窗口仍旧显示当前文件      :vsplit {file} 垂直显示新文件

 :close 关闭当前活动窗口
 :only  关闭所有，除了当前活动窗口

 如果当前标签页不止一个窗口，我们可以移动一个到新的标签页  ctrl+w T 移动当前

 tabedit {filename}  create new tab page
 <ctrl+w> T          move current windows to a new tab page
 :tabclose           close current tab page
 :tabonly            only maintain current tab page
 类似也有一套跳转的命令，参照上面
 :tabnext    gt
 :tabprev    gT


 多级目录：
 lcd  d:\workspace
 set path+=**
 find lua_re<tab>


 :edit .         :e.         当前工作目录
 :Explore .      :E          当前活动缓冲区所在的目录

 实际行与屏幕行
 hjkl
 gj  gk g0

fF{char}  之后可以通过 ; , 来回跳转  查找
{action}Tt{char}      一般删除，修改与T调用

aw  一个单词
aW  一个字串
is as  句子
ip ap   段落

marks标记跳转
m[a-zA-Z] 小写只对该缓冲区有效，大写则对全域有效
:marks 显示标记
`. 上次修改位置
`^ 上次退出插入模式位置
`< `> 上次可视模式选择的开始、结束


change列表
:changes 显示列表
g;  g,  在列表中向前向后跳转
gi 会先调转到`^的位置，然后进入插入模式


set path?  显示  .,,  其中.表示当前目录，,,表示工作目录


<ctrl+r><ctrl+w> 对当前正在搜索匹配的单词补全


reg [a-z] [A-Z]  小写的覆盖，大写的追加到reg
"0 拷贝专用 
"1 删除专用
"+ 与系统粘贴板一样  或者在插入模式下 <ctrl+r>+ 也可以粘贴  出可以yank delete 到"+，然后外部使用
"* 与 "+一样的效果，因为在windows macos下没有主剪切板的功能
其它特殊reg
	"% 文件名
	"# 轮换文件名
	". 上次插入文本
	": 上次执行Ex的命令
	"/  上次查找的模式

可以先y好，然后在v模式下选择文本，直接p替换，这样比较好。


---------- repeat -------------

gd	本函数内	定义
gD	本文件内	定义

mark:
``	last jump
`"	last edit
`.	last change
`0-9	vim edit

`开头 与 '开头一样，不过'开关的，在第一个非空字符中

:args 显示文件参数列表 
:all  :sall  打开参数列表中所有的文件
:wnext  :wprev(相同效果:wN) 保存并前往前一个/后一个文件
:n  开始编辑下一个文件
:N  开始编辑上一个文件
:first  :last 
或者以s开头的上术命令，在新窗口中打开，这个更有作用哦


:write  写到文件
:update 如果有修改，则写到文件

:au 列出所有的自动命令
:au cmd  列出特定的
:au!  删除。。。。


:split   ==  C-W s
:split {file}
:sfind  在'path'中查找并打开文件
C-W  ]  新窗口，跳到当前光标下的tag  
C-W  f  新窗口，跑到当前光标下的文件

C-W  n == :new
C-W  q == quit
C-W  c == :close
C-W  ^ 编辑另一个文件(当前缓冲区列表)
C-W  o 只保留当前窗口

C-W w
C-W C-W 在各个窗口之间切换

C-W  + - < >  调节窗口大小
C-W r R x 交换窗口位置

:ball   buffer列表中的每个文件打开一个窗口，

:bfirst  
:blast
:bnext
:bprev   == :bNext
:buffer N
:bmod 打开上一个编辑过的
前面都可以加s  开如 :sbnext 在新窗口中打开

map \p xxxx    " 以\开头映射命令    p可以是字符串如zhang
