
umask 002  #表示所有新创建的文件，屏蔽了其他用户2(写)的权限。

fsetpos == fseek  == rewind    # 他们都是定位FILE流的函数。C标准提供。
ftell 获取当前位置，好像。
fflush  清洗 
ferror   feof clearerr  # 这些都是针对出错处理的函数。
fileno 与 fdopen 是流个filedescripter的交互

flockfile  funlockfile   ftrylockfile   # 针对文件操作的锁， 可以嵌套哦，亲

散列/聚集 io  readv  writev   也叫向量IO  相对于传统的线性IO



内存映射：
mmap  mremap   munmap
mprotect改变内存区域的权限
msync  : 同步到磁盘

子进程也会忽略父进程忽略的信号，其他的都是默认操作


sys_siglist[signo] # 这个东西，保存了信号对应的名字



char* asctime_r(const struct tm * time, char* buf);
char* ctime_t(const time_t* timemp);

time_t mktime(struct tm* tm);
struct tm * gmtime_r (const time_t *timep, struct tm *0result);






SSH 连接慢的问题
一下这两项改为No
GSSAPIAuthentication no
GSSAPIDelegateCredentials no
实在不行，把下面这一行改为no,准行
UseDNS no



.bashrc 常用配置
# edit by preboy
alias la='ls -alF'
alias cls='clear'
PS1="\[\e[1;32m\]\u@\h:\w$ \[\e[m\]"

cat 与 tac 是一个工具集


linux信号发生时：
    同步信号：一般是本进程自己发给自己的，比如硬件中断、raise等。
        他产是立即就发生的，可能大raise返回之前就调用了。
        
    异步信号：其它进程发的，==
        在CPU获得时间片时被调用，
        从内核切换到用户态时被调用。 可能过早的退出系统调用。


    
man syscalls
查看所有系统调用。

lib64/libc.so.6  直接运行就可以查看版本，


======================= linux shell =======================

""   部分引用，之间的$ ` \ 保留特殊意义。
''   全引用，  不保留任何特殊字符的意义，
``  与 $() 一样，解释为系统命令，  fe:   `ls` == $(ls)
\  转义符
$0 $1 等表示参数，但从10开始，就要用花括号了${10}

变量赋值：
variable=value 或者 ${variable=value}
echo $variable  ==  echo ${variable}

echo "${color:=1000}"  表示如果没有对color赋值的话，color就是1000
$* $@ 表示所有的参数  在双引号中有区别  "$*" = "$1 $2 $3"  "$@" = "$1" "$2" "$3"
$# 参数数量
$$ 脚本运行的进程号
$? 退出状态


variable:=value
variable:=value

readonly variable  ：这一句之后设置variable为只读变量，

test : 结果为真，返回0  结果为假，返回非0

for var in 1 2 4 5 6      for var in {1..6}  for var in ${seq 1 2 100}
注意花括号











