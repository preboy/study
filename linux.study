============================ linux bash 学习笔记 ============================

    用户管理：
        adduser  useradd  userdel  usermod(修改用户帐号)
        useradd -G wheel  zcg 建立用户的同时附加组

    用户组管理：
        groupadd groupmod  groupdel


通配符：
    ？ 一个任意字符
    *  任意位的任意字符  ls -l [a-h]*.awk
    ^  代表取反
    [] 与正则中表示的一样
    {} 表示一组全集的集合。  ls -l {*.awk, 0?.perl}
    ^
    grep 的模式，用‘ “ 括起来。
        -c 列出数量
        -n 列出行
        -i 忽略大小写
        -l 只列出文件名
        -h 不显示文件名
        -r 表示递归搜索
        -w 精确匹配单词

        --include=*.go  只搜索特写的文件  etc: grep -r -w func . --include=*.go



sed [opt] 'sed command'  inputfile
sed [opt] -f sed_file inputfile
    opt:
        -n:     do not print
        -e:     next string be consider a sed command.  eg:   sed -e ""  -e "" inputfile

    sed包含定位行与操作两部分组成：
    x
    x,y
    /patern/
    /pattern/pattern/
    /pattern/, x
    x,y! 表示不在x,y范围内的行，取反
    $ 表示最后一行
    sed -n '/.*bus'p input  表示所有包含bus的行

    i\  c\ 插入、修改行。
    s 替换文件行中的部分内容


awk
    awk -F ':' 'awk code' inputfile
    awk -f awkscript input

    awk 'BEGIN {one=1, two=2} {print${onw+two}} ' inputfile  # 这一行运行错误全
    ll | awk 'BEGIN {one=1;two=2;}; {print one+two;}; END{}'


引用符号的意义：
    引用符号        意义
    ""              引用除了　$　'　\ 之外所以字符， 他们仍然是特殊意义。
    ''              所有的字符
    ``              解释为系统命令    在脚本中写： echo `ls`
    \               转义符

    $"varname"  与 $varname  可以保持变量的空格

    a = and
    o = or
    他们采用短路方式

    if [ ! -e $1 ]
    then
        ...
    elif
        ...
    else
        ...
    fi


    case variable in

    var1)
        command
        ;;
    var2)
        command
        ;;

    *)
        ;;
    esac



    for a in (1,2,3,4,5)            # or for a in 1,2,3,4     or   for a in {1..5}  or for a in {1..100..2}   or for a in $(seq 1 2 100)

    done

    for file in $(ls); do echo $file; done   # or  for file in $(*)
    for a in {1..5}; do echo a; done

    字符串长度：

    expr length "$string"   ====  $(#string)

    >  相当于  1>
    >> 相当于  1>>
    &> 相当于  2>&1

    cmd 2>&1 output.txt 将2 当作 1对待     == cmd &> output.txt

    tee -a 可以追加的方式

    bash 支持普通数组(以0作为开始索引)，关联数组
    $array_var[*] 取整个数组内容
    echo ${array_var[*]}; echo ${array_var[@]};
    index = 1; echo ${array_var[$index]}

    打印长度：echo ${#array_var[*]}

    FreeBSD好像不支持关联数组，幸好还有CentOS
    declare -A Arr_Name
    Arr_Name = { [index1]=val1,[index2] = var2 }
    or
    Arr_Name[index] = var1
    Arr_Name[index] = var2

    获取的时候与普通数组不一样哦：
    echo ${!Arr_Name[*]} echo ${!Arr_Name[@]}

    script -x scriptfile  # 启动调试模式


    函数：
    function fname()
    {
    }
    or
    fname()
    {
        echo $1 $2;
        echo "$@";      当作多个分割的单词
        echo "$*";      当作单个单词   书上说用的比较少
        return 0;
    }

    调用：
    fname;   or   fname arg1 args2;

    cmd_output = $(COMMANDS)
    cmd_output = `commands`

    字符串操作时，最好使用[[ xxx ]]

    = 两边没有空格：  赋值
    = 两边有空格：    比较

    cat f1 f2 f3 > f4
    cat -s file  压缩多余的空行
    tr -s 也是类似的功能

    find / -name "preboy.txt" -exec cp {} old \; 或者执行脚本

    echo abcabcabcabc | xargs -d c 将输入分割成很多部分

    INPUT | xargs -n 2 ./cechao.sh   执行cehao.sh多次，每次2个参数

    echo "Hello Wha Who" | tr 'A-Z' 'a-z'
    echo "Hello Wha Who" | tr 'A-Za-z' 'a-zA-Z'

    cat file.txt | tr -d 'set1' 删除set中的制定字符
    tr -d -c '0-9 \n'  删除set之外的东西

    md5sum计算文件的md5码

    %.*  %%.*
    #.*  ##.*  可以分割函数名与扩展名


# 后台执行 并发执行
(
    do command...

)&
wait            # 所有的子进程都结束了,后台进程都结束了,才返回



time -o outfile COMMAND


kill -15    or   kill -9 用于终止进入，通过发送信号
killall procname, 通过命名，终止所有进程


wall 向别人发送广播
mesg y/n 表示是否接收别人通过wall发送的消息，

head/tail -n 5 只显示5行

contrab 这个很久之前就知道了，


wget -t 5 url  尝试5次下载，如果有中断的话，


grep -o pattern file :  只输出被命中的串
grep -E : 使用正则表达式，否则使用通配符
grep -c ...  : 统计出现次数, 此处只统计行数，不统计一行出现的多次

grep -e "pattern" -e "pattern" :使用多个匹配
grep "text" . -R -n  表示搜索当前目录下所有的文件   : -n 表示计数，每一行前头写上行号


grep "main" . -r --include *.{h; cpp}
--include
--exclude  --exclude_dir
表示包含或者排除

grep 可以输出匹配字符的前几行与后几行，以及上下几行，
grep -A 5,  grep -B 4，  grep -C 3  分别表示前5行，后4行，前后3行


cut -f 2, 3 filename 显示文件的第2，3列


cut N- 从第N个字符开始到行尾
N-M
-M

cut -c1-5 file 表示只显示file文件的第1 ~ 5行，
-c-2 前两个字符

其中:
-b 表示字节
-c 表示字符
-f 定义的段

cut file -c1-2, 6-9 --output-delimiter ","
表示以,分隔


sed -i 's/text/replace/g' file 表示将输出结果，写入到原文件
也可以 '.../2g' 表示从第2个才开始
可以用[&] 来匹配被搜索到的东西，
echo this is an example | sed 's/\w\+/[&]/g'

但是如果要匹配其中的一部分，可以用()来括起来，后面可以用\1 \2 来表示
echo seven EIGHT | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/' 交换两个字符，呵呵，功能强大吧，


kill %jobnum
kill pid



###################################33

sed :
    $ :  standard for the last line.
    i\ a\ c\   insert append change pattern line.

sort:
    set filter by     -t:    split with :
    -k3n    sort as third filed.   number > alpha
    -u  remove repeat line

diff as uniq:
    sort -u remove all repeat line
    uniq only remove near repeat line.

uniq -c : print the repeat count per line.
    -d : only show repeaat line
    -u : only show not repeat line

join:
    the two file must be sorted.
    -t:  set : as the filter sign.

cut:
    -c:按字符提取文本
    cut -c3 file,  提取文件每一行中的地3个字符
    cut -c1-5 file ,提取每一行的1~5个字符
     cut -c1,5 file 提取第1,5个字符
     -d:  指定分根符
     -f 按域来提取， f1,4,  f1-4

paste:
    paste file1 file2   吧文件1,2,粘贴到一块儿，  file2的每一行，粘贴到file1的每一行最后
    -d: 设置：为新的分隔符
    -s 横着放

split:
    split : 将大文件，分隔成小文件
    split -2 srcfile  smallfilename  按每两行分隔一个文件
    split -b100 srcfile   按100B/每个文件 分隔
    split -C100 srcfile    同样是按照100B 分隔文件，但是更人性化，大小可能变化，考虑到行的问题，尽量保持文件的完整性

 tr:
     tr -d 0-9 file:  他的意思就是吧这个文件中所有的数字全部删除
     tr-d "[\n]" file  删除所有的回车符
      tr -s "[\n]" file  将所有重复的字符， 压缩成一个，这样可以用来吧很多空行替换成一个空行
      tr  s1  s2 file   用s2将s1中的字符替换掉
      tr "a-z" "A-Z" file  所有大写
      他也支持[:alpha:]  这一套东西
      tr -c  # -c 用于制定s1 中的补集

tar:
      tar -xvf  压缩包   # 解压非gzip压缩包
        tar -zxvf      #  解压gzip压缩包

        gzip file.all  # 压缩这个文件

        tar -zxvf file.all.gz # 解压

        gzip -d file.all.gz # 取消压缩，还原之后，仍是一个tar包

cat:
    -b  or  -n  ：显示行号
    -s :  两个连续的空行，只显示一行

tee:
    -a 追加到文件末尾

    :> logger  # 可以正阳清空文件内容



(...)&  圆括号内的命令，创建子shell运行，而且可以加到后台
子shell中的变量 对父shell来说，是不可见的

 while :
 do
    echo "sss"
 done

trap "commands" SIGN    # 设置信号处理命令    '' "" 表示忽略这个信号


[function] function_fname()
{
    local local_variable;
    cmd1, cmd2,
}
只能返回0  /  1

参数传递，与shell一样，通过$01234...


命令类表：
cmd1 && cmd2 && cmd3
cmd1 || cmd2 || cmd3




################################################  另一本书了  ################################

两种方式: 必须要使用双引号
echo -e  "\e[1;32m[FUCK]\e[1;0m"    绿色的[FUCK]
echo -e  "\033[31m[FUCK]\033[0m"    红色的[FUCK]


这二者的不同：
var=value    赋值
var = value  比较

       let result=s1+s4
       let st+=2
       result=[ s1 + s4 ]
       result=`expr 100+200`
       echo "4*0.2" | bc


定义别名后（与exe一样），想使用非别名，只需要在前面加 \    # 如：  \ls

脚本参数：
  $@  = "arg1" "arg2" "arg3"
  $*  = "arg1 arg2 arg3"

  export -f funcname  # n导出函数，这样，子进程就可以使用这个函数了


  获取就令的输出：

  $(ls | cat -n)
或者：
    `ls`

    字符串比较是，最好使用  [[ ]] 这种双中括号

 cat -T file  # 使用^现实tab

 find 命令中 使用 -o 链接多个条件
 find -iregex  # 使用正则表达式匹配
 find  -- maxdepth  mindepth  # 设置深度



xargs:      将标准输入的东西，转换成命令行参数u


    cal | xargs  # 将所有的'\n'转换成 ' '  真牛B    cal | xargs -n 3 是没3filed为一行分隔

    -d x : 表示使用x 分隔

    如果xargs 带参数，则表示执行

    -P 这个参数有作用：允许最多同时运行多个任务，
        龙哥用他替换了之前的 "for() ... &"实现多任务 
        还有一个外部程序可安装  parallel(CentOS 7)

        输入：  seq 20 | xargs -P 4 -I A sleep A     查看    ps ux | grep sleep


    # 可以这样写：
    cat a.txt | xargs -I {} ls -a {}  #表示分开执行

    $[a+5] 这个是就算结果


    md5sum : 计算md5的工具


  扩展名：
    ${var%.*}    删除%右侧的通配符    # 从右向左匹配哈
    ${var%%.*}   更加贪婪
    fe: echo "${var%.*}"           echo "${var%.exe}"


   $(var#*.)     删除所有的通配符     # 从左向右哈
   $(var##*.)    更加贪婪



comm :  # 比较两个文件（必须都经过排序了的）
comm file1 file2 # 显示3列，分别为 file1独有的，file2 独有的， 共有的行
参数： -1 -2 -3 表示删除第几列

setuid  setgid  # 以其他身份来运行程序

目录有一个粘滞位，表示：只有创建该目录的人，才有权限删除目录中的文件

# 目录堆栈  
 cd -
 pushd popd


  tree 这个需要自己安装 ，与windows中的一样，只不过功能更强大


  grep 默认使用通配符，-E 使用正则表达式
  -O ： 只打印出被匹配的单词


cut: 按照列来切割文件

   sed 可以使用&来代表被匹配项
   可以像lua那样使用() 括起来，在后面使用/1 /2 来指带

   组合多个表达式
   sed 'express1; express2; express3' = sed express1 | sed express2 | ...
   一般使用' 当使用"时，表示可以变量


   watch -n 5  "ls -al"  # 会见时输出结果，每5S更新一次



######################  tmux 使用简介 ############################

tmux new -s "session_name" -d   # 后台开启这个回话
tmux has -t "session_name"      # 检测是否有这个回话
tmux kill-session -t "session_name"  # 关闭这个回话，以及里面所有的程序
tmux neww -n "session_name:window_name" "vim main.cpp"   # 在session_name下新建一个窗口，并运行shess_command

ctrl + b, s # 在多个回话中选择
ctrl + b, w # 在同一个回话的多个窗口中选择
其他的已经够用了




[gcc-]    nm ldd objdump # 查看EXE东西  可以加前缀哦




----------- About g++ -------------

gcc -E hello.c              只激活预处理,
gcc -S hello.c              只激活预处理和编译，就是指把文件编译成为汇编代码。
gcc -c hello.c              只激活预处理,编译,和汇编,也就是他只把程序做成obj文件

ldir        增加include查找目录， 优先及最高


-include file  # 相当于在代码中的include  eg.  gcc hello.c -include /root/pianopan.h

-Ldir     制定库目录，否则知道系统的目录中去找

-llibrary    制定编译的时候使用的库



调试选项
    -g          只是编译器，在编译的时候，产生调试信息。
    -gstabs     此选项以stabs格式声称调试信息,但是不包括gdb调试信息.
    -gstabs+    此选项以stabs格式声称调试信息,并且包含仅供gdb使用的额外调试信息.
    -ggdb       此选项将尽可能的生成gdb的可以使用的调试信息.
    -glevel     请求生成调试信息，同时用level指出需要多少信息，默认的level值是2

链接方式选项：
    -static 此选项将禁止使用动库。
    优点：程序运行不依赖于其他库
    缺点：文件比较大

    -shared (-G) 此选项将尽量使用动态库，为默认选项
    优点：生成文件比较小
    缺点：运行时需要系统提供动态库

-Wall 一般使用该选项，允许发出GCC能够提供的所有有用的警告




预处理选项

    -Dmacro         相当于C语言中的#define macro
    -Dmacro=defn    相当于C语言中的#define macro=defn
    -Umacro         相当于C语言中的#undef macro
    -undef          取消对任何非标准宏的定义

    -O0
    -O1
    -O2
    -O3   编译器的优化选项的4个级别，-O0表示没有优化,-O1为缺省值，-O3优化级别最高

-C   在预处理的时候,不删除注释信息,一般和-E使用,有时候分析程序，用这个很方便的


# 不好意思，下面这几个我懂了
    -M      生成文件关联的信息
    -MM     和上面的那个一样，但是它将忽略由#include造成的依赖关系。
    -MD     和-M相同，但是输出将导入到.d的文件里面
    -MMD    和-MM相同，但是输出将导入到.d的文件里面


hexdump  od 他们都可以查看文件的内容



文件编码转换：
iconv -l   # 列出所有支持的格式
iconv -f gb2312 -t src.cpp > src2.cpp


cat 与 tac 是一个工具集



linux作为服务器，应该有如下规则：

    # 查看 INPUT
    iptables -L INPUT

    # 允许外部tcp链接到本地的9999端口，实际上也就允许了服务端与客户端之间的双向通信
    iptables -I INPUT -p tcp --dport 9999 -j ACCEPT

    # 允许本机的数据包发送到外部的端口。
    iptables -I OUTPUT -p --sport 9999 -j ACCEPT



# 设置中文编码
    export LANG=zh_CN.UTF-8
    其中 LC_ALL > LC_* > LANG


echo `ls -d $*` | xargs -n 1 cat -n


strings filename  # 查看文件中所有可以打印的字符串


pstack 打印某个进程的堆栈
ptrace

-- 读取整个文件并赋值到变量a
a=$(<a.sh)


Linux中高效编写Bash脚本的10个技巧  (http://os.51cto.com/art/201708/548109.htm?utm_source=tuicool&utm_medium=referral)

1、 脚本中多写注释
2、 当运行失败时使脚本退出
    # 如果命令运行失败让脚本退出执行
    set -o errexit
    # 或
    set -e

3、 当 Bash 用未声明变量时使脚本退出
    # 若有用未设置的变量即让脚本退出执行
    set -o nounset
    # 或
    set -u
4、 使用双引号来引用变量
5、 在脚本中使用函数
6、 字符串比较时用 = 而不是 ==
7、 用 $(command) 而不是老旧的 command(`xxx`) 来做代换
8、 用 readonly 来声明静态变量
9、 环境变量用大写字母命名，而自定义变量用小写



============================ SHELL快捷键 ============================

shell   bind -p 列出
ctrl+a/e  行首/尾
ctrl+h/d  删除前/后一字符
ctrl+u/k  删除至行首/尾
ctrl+r    历史查找
ctrl+f/b  光标前/后移一字符
alt +f/b  光标前/后移一单词
ctrl+p/n  历史记录中的上/下一条
alt+l/u+c 改变大小写
ctrl+t       修改前后两字符 = xp


screen中:
ctrl+a [ 复制模式



---------------- c program ---------------

fsetpos == fseek  == rewind    # 他们都是定位FILE流的函数。C标准提供。
ftell 获取当前位置，好像。
fflush  清洗
ferror   feof clearerr  # 这些都是针对出错处理的函数。
fileno 与 fdopen 是流个filedescripter的交互

flockfile  funlockfile   ftrylockfile   # 针对文件操作的锁， 可以嵌套哦，亲

散列/聚集 io  readv  writev   也叫向量IO  相对于传统的线性IO



内存映射：
mmap  mremap   munmap
mprotect改变内存区域的权限
msync  : 同步到磁盘

子进程也会忽略父进程忽略的信号，其他的都是默认操作


sys_siglist[signo] # 这个东西，保存了信号对应的名字



char* asctime_r(const struct tm * time, char* buf);
char* ctime_t(const time_t* timemp);

time_t mktime(struct tm* tm);
struct tm * gmtime_r (const time_t *timep, struct tm *0result);


linux信号发生时：
    同步信号：一般是本进程自己发给自己的，比如硬件中断、raise等。
        他产是立即就发生的，可能大raise返回之前就调用了。

    异步信号：其它进程发的，==
        在CPU获得时间片时被调用，
        从内核切换到用户态时被调用。 可能过早的退出系统调用。



man syscalls
查看所有系统调用。

lib64/libc.so.6  直接运行就可以查看版本，


======================= linux shell =======================

""   部分引用，之间的$ ` \ 保留特殊意义。
''   全引用，  不保留任何特殊字符的意义，
``  与 $() 一样，解释为系统命令，  fe:   `ls` == $(ls)
\  转义符
$0 $1 等表示参数，但从10开始，就要用花括号了${10}

变量赋值：
variable=value 或者 ${variable=value}
echo $variable  ==  echo ${variable}

echo "${color:=1000}"  表示如果没有对color赋值的话，color就是1000
$* $@ 表示所有的参数  在双引号中有区别  "$*" = "$1 $2 $3"  "$@" = "$1" "$2" "$3"
$# 参数数量
$$ 脚本运行的进程号
$? 退出状态


variable:=value

readonly variable  ：这一句之后设置variable为只读变量，

test : 结果为真，返回0  结果为假，返回非0

for var in 1 2 4 5 6      for var in {1..6}  for var in ${seq 1 2 100}
注意花括号



在同一行上多条命令之后用;隔开
ls -l ; who; date


通配符：

* 任意字符串
？任意一个字符
^ 取反
[]  与 正则一样
{}  表示集合：   ls -l {[a-h].awk, 0?.pem}

[a-h]*.[^awk]* 列出以a-h开头，不以awk结尾巴的



在sed中$表示最后一行
sed -n '$p' input

ls -l | sed '/cpp/czcg' 改变一行    // c: change
ls -l | sed '/cpp/,/out/s/game/preboy/g'   可以是pg

不带g，则具替换每一行第一次出现的位置，否则全部
sed 's/abc/def/g' 可以不指定范围
sed 'y/12345/ABCDE'  input  变化，tr也有这个功能
可以将多个命令写在一个{}里面，与多个-e参数功能一样哟，  多个之间用;隔开
sed '/partern/{n; s/1/2/g; }'  input n 表示处理下一行，
用;隔开的命令也行
sed 's/1/2; s/3/4; ' input



${var:-333}   如果var不存在，则返回333,否则返回var
${var:=333}   如果var不存在，则返回333，并把333赋值给var,   否则返回var
${var:?333}   如果var不存在，则退出脚本并错误输出333,   否则返回var
${var?333}
${var:+333}   如果var不存在，则返回空  ,  否则返回333  与上面相反

$((exp))  符号C语言规范的表达式




()  在子shell中执行，结果不影响当前shell  比如变量修改

{} 在当前shell中执行，影响当前shell      比如变量修改





################## 字符串相关的操作：##################

${#string}
expr length "$string"
    求长度

expr match $string $substring
    若匹配不到，返回0，否则返回匹配到的长度
    fe: expr match "hello"  "hel"  返回3，   expr match "hello" ".*l"


${string:startpos}
${string:startpos:length_pos}
    从左开始计数，取子字符串

${string: -startpos}
${string: -(startpos)}
    从右开始计数，取子字符串

expr substr $string $postion $length
    这种方法也行，但是，索引是1开始


expr match $string '\($substring\)'
expr $string  : '\($substring\)'
    使用正则表达式匹配，从左开始

expr match $string '.*\($substring\)'
expr $string  : '.*\($substring\)'
    使用正则表达式匹配，从右开始


删除子串：
${var%.*}    右短
${var%%.*}   右长
${var#*.}    左短
${var##*.}   左长


替换：
${string/find/replace}      仅替换一次
${string//find/replace}     替换所有

${string/#find/replace}     替换开头处的字符串
${string/%find/replace}     替换结尾处的字符串
    string=abcdef
    ${string/#a*c/111}      111def
    ${string/#de*/111}      abc111


变量的间接引用
b=100
a=b
eval tmp=\$$a 或者 tmp=${!a}


expr 支持 | &  < > ~!  + - * / 等数学运算符
但在是expr 中若出现元字符，应当括起来，比如：  expr 100 \* 23


bc 支持浮点数运算，他是内建的计算器


cat:
    -b 编号，空不行编号
    -n 所有行编号
    -E 每一行结尾加$
    -s 去掉重复的空行


eval 与直接运行命令一样的效果，他的优势是：如果命令中包含特殊的字符，


冒号的用法：
1)
while :  # 冒号可以表示永真
do
    ...
done

2)
:>logg    清空文件



()& 在后台运行子进程
wait 等待所有字进程，因为没有默认参数


在函数内使用 let "a=100" 此时，a会变成全局变量，如果想要使得a变成局部变量，需要在之前使用 local a 声明


命令列表
c1 && c2 && c3 ..
依次执行，直到某个返回FALSE为止

c1 || c2 || c3


数组
city[n]=value
n可以是数字不需要连续，也可以是任意字符
city[zhang]=chaoguo

    另一种方法：
    city=(v1 v2 v3 v4)     这种方式默认数字索引
    city={[2]=v2 [10]=v3   ... }
    这种情况，如果未指定索引，则自动取前一个索引并加上1


"$@"  "$*"
 用引号括起来的时候，
    @表示分开了的，
    *表示一坨，锅巴饼
    没有括，好像都一个样
这一条对于数组同样适用，
"${city[@]}"    分行打印
"${city[*]}"    打印在同一行


数组也可以取子数组、抽取、替换 与字符串差不多

${a[*]:1:3}  取第一个，到 第三个
${a[*]:0}    取第0个到默认(最后)

${a[*]#M*a}   将带有M*a的字串做处理，删除匹配的子串，但不是删除整个串哦， 最短删除   (不要写成#/哦，我犯过错)
${a[*]##M*a}  将带有M*a的字串做处理，删除匹配的子串，但不是删除整个串哦， 最长删除

${a[*]/M*a/replacement}     替换         一样的道理
${a[*]//M*a/replacement}    替换 最长




let 中不需要使用$符号

[] 与let一个样



错误，输出，都重定向
2 > &1
&>

数组长度
${#a[@]}


declare -A a
数组索引
${!a[@]}



$\command  这样使用之后，不忽略了alias，而是直接使用命令


以调试方式
bash -x script.sh

文件权限制  w r x
执行位特殊权限：
    拥有者   setuid
    同组     setgid
    粘滞位: 目录还有一个权限，在其它位的x, 表示只有目录的创建者才有限制删除文件。tT

    chmod chown  ... -R 以递归执行下去
    chown user:group  file   同时更改了组



linux文件系统第二属性
lsattr chattr


touch的作用：
    touch file 用于创建文件
    touch -a file 修改文件访问时间
    touch -m file 修改文件内容更改时间
    touch -d "timeformat" ... 还可以指定其它时间

dd if=/dev/zero of=zcg.data bs=1M count=2
dd if=/dev/cdrom of=zcg.iso  创建ISO文件


seq 20 | head -n 9   打印文件前9行
seq 20 | head -n -9  打印文件除去最后9行的所有行
seq 20 | tail -n 4   打印最后4行
seq 20 | tail -n +4  打印除去最开始4行之外所有的行

sed 's/\w+/[&]/g' input   & 表示之前匹配到的



生成序列
{1..50}  {a..z}  {A..Z}

字符串比较，最好使用[[  ]]



sudo find . \( -name "*.ini" -o -name "*.conf" \)
-regex "" 使用正则表达式

find . ! -name "*.txt" -print  否定形式

unix文件有三个时间：但是无创建时间
访问时间
修改时间
变化时间  文件元数据（权限）修改时间按
stat filename 查看文件的各个时间

find . -type f -name "*.txt" -print0 | xargs -0 wc -l
这条命令，-print0  xars -0 使用都是null结束符

这种情况很有可能
xargs -I {}  s.sh -p {} -i    # -I 用于命名，然后指定使用地方

可以将输出导出给子shell，这是一个好方法
cat file.txt | ( while read arg; do echo $arg; done)
cat file.txt | xargs



$[1+3] 执行算术运算
$(命令)


md5sum file1 计算校验和


rename 是一款改名工具，功能很强大哦
rename 's/ /_/g' *.txt   把文件名中所有的空格，替换成_
rename 'y/[a-z]/[A-Z]' *.txt



lsof  这个功能很强大
pwdx  查看目录

安装 mlocalte
修改时间：   -- tzselect无效，不知道为什么
按照网上的修改方法，之前是EDT时间，修改之后变成UTC时间了，不是CST时间。
参考的这个：
mv /etc/localtime /etc/localtime.bak
ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime




convert tab to space or reserved
expand/unexpand


rdate -s time.nist.gov  同步时间


-- 查看导出表
nm -D 7z.so
objdump -tT 7z.so



关于linux的umask:
一、文件基数为666，目录为777，即文件无设x位，目录可设x位。
二、chmod是设哪个位，哪么哪个位就有权限，而umask是设哪个位，则哪个位上就没权限。
总结：新建的文件、文件夹的权限就是666/777-mask的权限


// 查看系统资源占用

// 工具-------------
top
sysstat 系列
iotop
dstat
ifstat

// 使用-------------




打包时排除某些文件夹： 注意：  --exclude=./Admin   而不是：--exclude=./Admin/*
tar -czvf bin.tar.gz  --exclude=./Admin --exclude=./node_modules  ./*


netstat只列出当前用户
netstat --inet  -ee | grep zcg

ss 也有同机的功能 -e
ss -lpoten | grep 1003 | grep GameServer


# 会对某运行中的程序产生dump文件
pcore


关于时间戳转换的问题：
date +"%Y%m%d" 输出 20170512
date +%s                            # 输出: 1521535216
date -d '2013-2-22 22:14' +%s       # 输出：1361542440
date -d @1521535216                 # 输出: Tue Mar 20 16:40:16 CST 2018



两台机子无密码登录脚本回忆：
    A是踏板机   B为其它机器

scp install.sh root@B:~/
ssh root@B "
    id game > /dev/null 2>&1
    if [ $? -eq 1 ];then
        adduser -G wheel -p "此得的密码是加密后的字符串" game
    fi
    ./install.sh
    ssh-copy-id -i ~/.ssh/id_rsa.pub  game@B
"

工具
======================
utrace：用于分析C++程序性能


===================== 在另一台机器上执行命令时需要 tty的问题 =====================

执行这样的命令：无法成功    sudo 必须要tty
ssh game@10.135.55.206  "sudo ls /"
    ERROR: sudo: sorry, you must have a tty to run sudo

加个参数-t就可以了
ssh -t game@10.135.55.206  "sudo ls /"
    OK: Connection to 10.135.55.206 closed.

putty也有一个-t参数，类似的功能，用在pworld的build.bat中



===================== <<< 输入内容
加入a.sh在执行过程中需要输入
read "Please Enter yes"
则该脚本无法自动完成

如何才能完全脚本化呢？

./a.sh  <<< 要输入的内容
这样就可以执行下去了


