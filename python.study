在交互式中，_代表最后一次表达式的值

print("string", end="")    # 这样的语句，可以自己提供可选的结束符（默认是\n）

元祖()可以不用括号，但是要注意最乎一个‘,’

for line in open("filename"):
    print(line)

t = set("hello")   # 这就是集合
集合支持的操作:
    | 并：
    & 交
    - 差，在前者中但不在后者中
    ^  对称差：在前者后者中，但是不出现在二者交集中
    t.add('x')            添加
    t.update([1,2,3])     添加
    t.remove('x')         移除


集合：
    键不可以是会发生变化的值，只能是 string, number, tuple, 
    in 可以测试是否在dict中，
    if "zcg" in family:
        p = family["zcg"]
    else:
        p = 0

    相当于：    
        p = family.get("zcg", 0)
        list(family)  #获取关键字列表

        del family["zcg"]


for x in range(0, 14, 3)  猜猜是什么意思呢？

def  func_a(a, b):
        return (a+b, a-b)

x, b = func_a(b=1, a=10)



要在函数中改变全域变量的值，需要在其中先使用global 申明


使用yield的函数，叫做生成器

import div 
import div as d

from div import div_func

一行写不完的东西，可以用“\”来续行

分号;分隔多条语句，单条可以不写


变量名特殊：
_foo        # 单下划线 不能被 from module import * 导入，表示私有变量
__init__    # 内部定义使用
__abc       # 表示私有变量，函数

# -*- coding: UTF-8 -*-

isinstance(s, list)   # 类型检测

a = [1,2,[3,4]]
b = list(a)
b is a   # False   b是a的浅复制，即使应用

b = copy.deepcopy(a)  深复制，a,b之间再无联系

两种集合:  set   frozenset 不可变集合，可变集合




isinstance
issubclass

value = a if a < b else b

enumerate(s)    ==>  (0, s[0]), (1, s[1]), ...

for i, x in enumerate(s):
    print(i, x)

s = (1,2,3)
t = (4,5,6)
for x, y in zip(s, t):
    pass


函数中如果使用局部变量是还没有赋值，则会异常
[ x * 2 for x in a]  列表包含
( x * 2 for x in a)  生成器


@classmethod  成员函数中的第一个参数为class，而不是一个类
@staticmethod
@property  将类中定义的函数可以在外部当成成员函数使用


"""
    class TestA(object):
        @classmethod
        def func_a(cls):
            print(cls, type(cls))

        def func_b(self):
            print(self, type(self))        

        @staticmethod
        def func_c():
            print("this is in statkc")


    if "__main__" == __name__:
        ta = TestA()
        ta.func_a()
        print("dd")
        ta.func_b()
        print('cc')
        ta.func_c()
        TestA.func_c()
"""





--------------------- new at comp --------------


"str" * 8     # 8倍字符串
模块，就是一个文件
from imp import reload   # 从文件中复制出一个名字

'f' in d        # d = {}  测试F是否是D的键

isinstance(L, list)   type(L) == "list"

O   0x   0b  分别表示8  16  2 进制

"{0:o} {1:0x} {2:0b}".format(64,64,64)  分别显示   oct   hex   bin 


set("fuckyou,fuckme")     or  {'a', 'b'}

 a = {'fuckme', 'fuckme', 'fuckyou'}  a是一个集合

 变量总是指向一个对象的指针，不像lua， a  =3 就是复制


global 使用全局变量

nolocal 使用外层变量，类似闭包的东西。 

a,b,c,d = [1,2,3,4] 可以这样哦，
a, *b = [1,2,3,4]  b 会匹配剩下的[2,3,4]  而且更神奇的是，b也可以出现在中间哦，
a, *b, c = [1,2,3,4] 猜猜结果？
这个功能是不是有点像erlang中的匹配？ 带*的会最终是一个[],  但后面匹配的可以是"string", 'string', 

下面这个例子会复制a，这样在循环中，可以修改a的内容
for x in a[:]:
    print(x)
else:
    print("the for end")
在for的最后，会执行else部分，只要没有中途break
while a < 10:
    a = a + 1
    if a == 2:
        break
else:
    print("while else")
wile与for也一样，只要没有break则会执行esle部分




############################################################
类变量  类成员函数示例：
class Person:
    name2 = []
    def __init__(self,name):
        self.__name = name
        print ('(Initializing %s)' %self.__name )
    def show(self):
        print(self.__name)
        print(self.name2)

if "__main__" == __name__:
    p = Person("zcg")
    q = Person("dengxiao")
    Person.name2 = "class Person"
    p.show()
    q.show()
    print("__________________________", Person.name2, p.name2, q.name2)
    p.name2 = "obj p"
    p.show()
    q.show()
    print("===========================", Person.name2, p.name2, q.name2)
    q.name2 = "obj q"
    p.show()
    q.show()
    print("............................", Person.name2, p.name2, q.name2)


"""
类成员变量，在使用前必须先定义
"""
class Person:
    def __init__(self, name):
        self.__name = name
        # self.var = 0
    def set(self, var):
        self.var = var
        print("in set:", self.__name, self.var)
    def show(self):
        print(self.__name)
        print(self.var)

if "__main__" == __name__:
    p = Person("zcg")
    # p.show() 报错，在使用之前必须先定义，即使写成 p.var = "wocao"这样在外部定义也行
    p.set("fuck")
    p.show()




############################ 包装器 #########################################

def funA(a):
    print ('funA', a)
    return a
def funB(b):
    print( 'funB', b)
    return b

@funA
@funB
def funC():
    print( 'funC')

# 相当于 funC = funA(funB(funC))


@funA(x)
@funB
def funC():
    print( 'funC')
#相当于 funC = funA(x)(funB(funC))

@funA(x)
@funB(xx)
def funC():
    print( 'funC')
# 相当于 funC = funA(x)funB(xx)(funC)




a = "hello world"
a[i:j]      # i<= k < j

python 不会自动把字符串转换为数字

range(i,j, s） 同样的问题   i <= k < j



################# 生成器的例子 ##############3
def cd(n):
    print("begin")
    while n > 0:
        yield n
        n = n - 1

c = cd(10)

for x in c:
    print(x)



################## 携程的例子 #######################

def a():
    print("start")
    while True:
        x, y = (yield)
        print("get", x, y)



一下划线开始的，比如： _foo
不能使用  from a import * 导入

__s  私有类成员


　
ａ　＝　ｂ　应用

对于数字，字符串， 